/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.academia2.viewr.mensalidade;

import academia2.GeraMatricula;
import academia2.HibernateUtil;
import academia2.model;
import br.com.academia2.model.Mensalidade;
import br.com.academia2.viewr.treinos.Biceps;
import java.awt.Color;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Iterator;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.BadLocationException;
import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Restrictions;

/**
 *
 * @author anton
 */
public class GerenciaMensalidade extends javax.swing.JDialog {

    Connection conec;
    model co = new model();
    private DefaultTableModel tmResultSet = new DefaultTableModel(null, new String[]{"ID", "DATA INICIO", "VALOR", "ANO", "VALOR EM DEBITO", "VALOR PAGO"});
    ;
  java.util.List<br.com.academia2.model.Mensalidade> resultado;
    private ListSelectionModel lsmResult;
    private DefaultTableModel tabela;
    private int idDescricaoControle;
    private int cod;
    //variaveis que armazenam os vvalores do banco que seja referente aos meses pagos 
    private String janeiro;
    private String fevereiro;
    private String marco;
    private String abril;
    private String maio;
    private String junho;
    private String julho;
    private String agosto;
    private String setembro;
    private String outubro;
    private String novembro;
    private String dezembro;

    private float valorDebito;
    private String dataTermino;

    /**
     * Creates new form GerenciaMensalidade
     */
    public GerenciaMensalidade(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopExercicios = new javax.swing.JPopupMenu();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTCliente = new javax.swing.JTextField();
        jBAdicionar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTable1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);          lsmResult = jTable1.getSelectionModel();          lsmResult.addListSelectionListener(new ListSelectionListener() {               public void valueChanged(ListSelectionEvent e) {                                        if (! e.getValueIsAdjusting()){                           jTTabelaLinhaSelecionada(jTable1);                       }                                    }          });
        jLabel2 = new javax.swing.JLabel();
        divt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTValor = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTAno = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTValorPago = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTMes = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTDiaPagamento = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("MENSALIDADE");

        jPanel2.setBackground(new java.awt.Color(51, 51, 51));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("CLIENTE");

        jTCliente.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jTCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTClienteKeyPressed(evt);
            }
        });

        jBAdicionar.setBackground(new Color(0,0,0,1));
        jBAdicionar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/academia2/icone/add_icon.png"))); // NOI18N
        jBAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAdicionarActionPerformed(evt);
            }
        });

        jTable1.setModel(tmResultSet);
        jTable1.setCellSelectionEnabled(true);
        jTable1.setEditingColumn(0);
        jTable1.setEditingRow(0);

        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("DATA INICIO:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("ANO:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("VALOR:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("VALOR PAGO:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("MÃŠS ATUAL:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("DIA PAGAMENTO:");

        jButton4.setBackground(new Color(0,0,0,1));
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/academia2/icone/pesquisa.png"))); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 588, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTCliente))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jTextField8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(134, 134, 134)
                        .addComponent(jBAdicionar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(divt, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                            .addComponent(jTMes))
                        .addGap(22, 22, 22)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTDiaPagamento, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                            .addComponent(jTValor))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTAno, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                            .addComponent(jTValorPago))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(divt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jTValor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jTAno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jTDiaPagamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jTValorPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jBAdicionar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jTextField8, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(624, 393));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jTClienteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTClienteKeyPressed
        jogaClientenoPopup(evt);
        pegaMesAtual();
        pegaDadosMensalidade();

        // TODO add your handling code here:
    }//GEN-LAST:event_jTClienteKeyPressed

    private void jBAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAdicionarActionPerformed
        int controle = Integer.parseInt(jTMes.getText());
        switch (controle) {
            case 1:
                if (this.janeiro == null) {
                    try {

                        pagamento();
                        //   salvar();
                        // TODO add your handling code here:
                    } catch (SQLException ex) {
                        Logger.getLogger(GerenciaMensalidade.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {

                    JOptionPane.showMessageDialog(null, "mÃªs Pago");

                }
                break;
            case 2:
                if (this.fevereiro == null) {
                    try {

                        pagamento();
                        //   salvar();
                        // TODO add your handling code here:
                    } catch (SQLException ex) {
                        Logger.getLogger(GerenciaMensalidade.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {

                    JOptionPane.showMessageDialog(null, "mÃªs Pago");

                }
                break;
            case 3:
                if (this.marco == null) {
                    try {

                        pagamento();
                        //   salvar();
                        // TODO add your handling code here:
                    } catch (SQLException ex) {
                        Logger.getLogger(GerenciaMensalidade.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {

                    JOptionPane.showMessageDialog(null, "mÃªs Pago");

                }
                break;
            case 4:
                if (this.abril == null) {
                    try {

                        pagamento();
                        //   salvar();
                        // TODO add your handling code here:
                    } catch (SQLException ex) {
                        Logger.getLogger(GerenciaMensalidade.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {

                    JOptionPane.showMessageDialog(null, "mÃªs Pago");

                }
                break;
            case 5:
                if (this.maio == null) {
                    try {

                        pagamento();
                        //   salvar();
                        // TODO add your handling code here:
                    } catch (SQLException ex) {
                        Logger.getLogger(GerenciaMensalidade.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {

                    JOptionPane.showMessageDialog(null, "mÃªs Pago");

                }
                break;
            case 6:
                if (this.junho == null) {
                    try {

                        pagamento();
                        //   salvar();
                        // TODO add your handling code here:
                    } catch (SQLException ex) {
                        Logger.getLogger(GerenciaMensalidade.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {

                    JOptionPane.showMessageDialog(null, "mÃªs Pago");

                }
                break;
            case 7:
                if (this.julho == null) {
                    try {

                        pagamento();
                        //   salvar();
                        // TODO add your handling code here:
                    } catch (SQLException ex) {
                        Logger.getLogger(GerenciaMensalidade.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {

                    JOptionPane.showMessageDialog(null, "mÃªs Pago");

                }
                break;
            case 8:
                if (this.agosto == null) {
                    try {

                        pagamento();
                        //   salvar();
                        // TODO add your handling code here:
                    } catch (SQLException ex) {
                        Logger.getLogger(GerenciaMensalidade.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {

                    JOptionPane.showMessageDialog(null, "mÃªs Pago");

                }
                break;
            case 9:
                // System.out.print(this.setembro);
                if (this.setembro == null) {
                    try {

                        pagamento();
                        //   salvar();
                        // TODO add your handling code here:
                    } catch (SQLException ex) {
                        Logger.getLogger(GerenciaMensalidade.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {

                    JOptionPane.showMessageDialog(null, "mÃªs Pago");

                }
                break;
            case 10:
                if (this.outubro == null) {
                    try {

                        pagamento();
                        //   salvar();
                        // TODO add your handling code here:
                    } catch (SQLException ex) {
                        Logger.getLogger(GerenciaMensalidade.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {

                    JOptionPane.showMessageDialog(null, "mÃªs Pago");

                }
                break;
            case 11:
                if (this.novembro == null) {
                    try {

                        pagamento();
                        //   salvar();
                        // TODO add your handling code here:
                    } catch (SQLException ex) {
                        Logger.getLogger(GerenciaMensalidade.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {

                    JOptionPane.showMessageDialog(null, "mÃªs Pago");

                }
                break;
            case 12:
                if (this.dezembro == null) {
                    try {

                        pagamento();
                        //   salvar();
                        // TODO add your handling code here:
                    } catch (SQLException ex) {
                        Logger.getLogger(GerenciaMensalidade.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {

                    JOptionPane.showMessageDialog(null, "mÃªs Pago");

                }
                break;

        }

    }//GEN-LAST:event_jBAdicionarActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        //buscaExercicio(evt);
        buscarMensalidades();
        //    buscar();        // TODO add your handling code here:;
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        int linha;
        int coluna;
        if (evt.getClickCount() == 2 || evt.getClickCount() > 2) {
            linha = jTable1.getSelectedRow();
            coluna = jTable1.getSelectedColumn();
            jTable1.getColumnName(1);
            PagamentoAtrazado atrazado = new PagamentoAtrazado(null, true);
            atrazado.passaId(1);
            atrazado.setVisible(true);
        }
    }//GEN-LAST:event_jTable1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GerenciaMensalidade.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GerenciaMensalidade.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GerenciaMensalidade.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GerenciaMensalidade.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                GerenciaMensalidade dialog = new GerenciaMensalidade(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField divt;
    private javax.swing.JButton jBAdicionar;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPopupMenu jPopExercicios;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTAno;
    private javax.swing.JTextField jTCliente;
    private javax.swing.JTextField jTDiaPagamento;
    private javax.swing.JTextField jTMes;
    private javax.swing.JTextField jTValor;
    private javax.swing.JTextField jTValorPago;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField8;
    // End of variables declaration//GEN-END:variables

    private void buscaExercicio(String cliente) {

        Session sesion = HibernateUtil.getSessionFactory().openSession();
        Transaction tx = null;
        int i = 1;
        String text = jTCliente.getText();
        Criteria crit = sesion.createCriteria(br.com.academia2.model.Cliente.class);
        crit.add(Restrictions.like("nome", text + "%"));
        java.util.List results = crit.list();
        for (Iterator iterator = results.iterator(); iterator.hasNext();) {
            br.com.academia2.model.Cliente Sal = (br.com.academia2.model.Cliente) iterator.next();

            this.cod = Sal.getId();
            String codigo = String.valueOf(Sal.getId());
            JMenuItem item = new JMenuItem(codigo + "," + Sal.getNome());
            item.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent arg0) {
                    String mods = item.getText();
                    String campos[] = mods.split(",");
                    cod = Integer.parseInt(campos[0]);
                    jTCliente.setText(campos[1]);
                    //  System.out.println(cod);
                    pegaDataEntrada();
                }

            });
            jPopExercicios.add(item);

        }
    }

    private void jogaClientenoPopup(java.awt.event.KeyEvent evento) {
        if (evento.getKeyCode() == evento.VK_SPACE) {
            jPopExercicios.removeAll();
            buscaExercicio(jTCliente.getText());
            jTCliente.add(jPopExercicios);
            jTCliente.setComponentPopupMenu(jPopExercicios);
            try {
                int dotPosition = jTCliente.getCaretPosition();
                Rectangle popupLocation = jTCliente.modelToView(dotPosition);
                jPopExercicios.show(jTCliente, popupLocation.x, popupLocation.y + 30);
                jTCliente.setFocusable(true);
            } catch (BadLocationException badLocationException) {
                System.out.println("Oops");
            }
        } else if (evento.getKeyCode() == evento.VK_F1) {
            new Biceps(null, true).setVisible(true);
        }
    }

    private void pegaDataEntrada() {
        Session sesion = HibernateUtil.getSessionFactory().openSession();
        Transaction tx = null;
        //PESQUISA COM SQLQUERY E JOIN MAIS TRANSFORMACAO EM LISTA DO HIBERNATE.
        SQLQuery query = sesion.createSQLQuery("select ficha.dataEntrada from ficha where idCliente = '" + this.cod + "'");
        query.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
        java.util.List results = query.list();
        for (Object object : results) {
            Map row = (Map) object;
            divt.setText((String) row.get("dataEntrada"));

        }
    }

    public void pegaMesAtual() {
        GeraMatricula gera = new GeraMatricula();
        gera.pegaData();
        jTMes.setText(String.valueOf(gera.getNumeroMes() + 1));
    }

    private void pegaDadosMensalidade() {
        Mensalidade ms = new Mensalidade();
        Session sesion = HibernateUtil.getSessionFactory().openSession();
        Transaction tx = null;
        GeraMatricula gera = new GeraMatricula();
        gera.pegaData();
        //PESQUISA COM SQLQUERY E JOIN MAIS TRANSFORMACAO EM LISTA DO HIBERNATE.
        SQLQuery query;
        query = sesion.createSQLQuery("SELECT*FROM mensalidade where idCliente = '" + this.cod + "' and ano='" + gera.getNumeroAno() + "'");
        query.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
        java.util.List results = query.list();
        for (Object object : results) {
            Map row = (Map) object;
            jTValor.setText(String.valueOf(row.get("valor")));
            jTAno.setText(String.valueOf(row.get("ano")));
            jTDiaPagamento.setText(String.valueOf(row.get("diaPagamento")));
            jTValorPago.setText(String.valueOf(row.get("valorPago")));

            this.janeiro = (String) row.get("janeriro");
            this.fevereiro = (String) row.get("fevereiro");
            this.marco = (String) row.get("marco");
            this.abril = (String) row.get("abril");
            this.maio = (String) row.get("maio");
            this.junho = (String) row.get("junho");
            this.julho = (String) row.get("julho");
            this.agosto = (String) row.get("agosto");
            this.setembro = (String) row.get("setembro");
            this.outubro = (String) row.get("outubro");
            this.novembro = (String) row.get("novembro");
            this.dezembro = (String) row.get("dezembro");

            this.valorDebito = (Float) row.get("valorDebito");
            this.dataTermino = (String) row.get("dataTermino");
            this.idDescricaoControle = Integer.parseInt(row.get("id").toString());

            // System.out.println(this.cod);
        }

        ms.setJaneriro(janeiro);
        //System.out.print(janeiro);
        ms.setFevereiro(fevereiro);
        ms.setMarco(marco);
        ms.setAbril(abril);
        ms.setMaio(maio);
        ms.setJunho(junho);
        ms.setJulho(julho);
        ms.setAgosto(agosto);
        ms.setSetembro(setembro);
        ms.setOutubro(outubro);
        ms.setNovembro(novembro);
        ms.setDezembro(dezembro);

    }

    private void pagamento() throws SQLException {
        String pagamento = null;
        String mes = "";
        if (Integer.parseInt(jTMes.getText()) == 1) {
            mes = "janeriro";
        } else if (Integer.parseInt(jTMes.getText()) == 2) {
            mes = "fevereiro";
        } else if (Integer.parseInt(jTMes.getText()) == 3) {
            mes = "marco";
        } else if (Integer.parseInt(jTMes.getText()) == 4) {
            mes = "abril";
        } else if (Integer.parseInt(jTMes.getText()) == 5) {
            mes = "maio";
        } else if (Integer.parseInt(jTMes.getText()) == 6) {
            mes = "junho";
        } else if (Integer.parseInt(jTMes.getText()) == 7) {
            mes = "julho";
        } else if (Integer.parseInt(jTMes.getText()) == 8) {
            mes = "agosto";
        } else if (Integer.parseInt(jTMes.getText()) == 9) {
            mes = "setembro";
        } else if (Integer.parseInt(jTMes.getText()) == 10) {
            mes = "outubro";
        } else if (Integer.parseInt(jTMes.getText()) == 11) {
            mes = "novembro";
        } else if (Integer.parseInt(jTMes.getText()) == 12) {
            mes = "dezembro";
        } else {
            JOptionPane.showMessageDialog(null, "Selecione o MÃªs a ser Quitado");
        }

        Mensalidade ms = new Mensalidade();
        ms.setId(idDescricaoControle);
        ms.setIdCliente(cod);
        ms.setDataInicio(divt.getText());
        ms.setValor(Float.parseFloat(jTValor.getText()));
        ms.setAno(jTAno.getText());
        /// codigo que precisa ser avaliado
        if (jTValorPago.getText().equalsIgnoreCase("") || jTValorPago.getText().equalsIgnoreCase("0")) {
            ms.setValorDebito(this.valorDebito + Float.parseFloat(jTValor.getText()));
            System.out.println("1");
        } else if (Float.parseFloat(jTValorPago.getText()) < 50) {
            if (this.valorDebito > 0) {
                ms.setValorDebito(this.valorDebito - Float.parseFloat(jTValorPago.getText()));
                System.out.println("2");
            } else {
                // ms.setValorDebito(Float.parseFloat(jTValor.getText()) - Float.parseFloat(jTValorPago.getText()));

                if (Float.parseFloat(jTValorPago.getText()) == 0 || jTValorPago.getText().equalsIgnoreCase("")) {
                    pagamento = null;
                    //System.out.println("3" + ms.getValorDebito());
                    ms.setValorDebito(Float.parseFloat(jTValor.getText()) - Float.parseFloat(jTValorPago.getText()));
                    //System.out.println("6" + ms.getValorDebito());

                } else if(Float.parseFloat(jTValorPago.getText())>=50){
                        pagamento = "pago";
                        System.out.println("6" + ms.getValorDebito());
                }else{
                   ms.setValorDebito(Float.parseFloat(jTValor.getText()) - Float.parseFloat(jTValorPago.getText()));
                   pagamento = null;
                }

            }

        } else {
            if (this.valorDebito > 0) {
                ms.setValorDebito(this.valorDebito - Float.parseFloat(jTValorPago.getText()));
                System.out.println("4");
            } else {
                ms.setValorDebito(Float.parseFloat(jTValor.getText()) - Float.parseFloat(jTValorPago.getText()));
                pagamento = "pago";
                System.out.println("5");
            }

        }
// fim do codigo para avaliaÃ§Ã£o
        ms.setValorPago(Float.parseFloat(jTValorPago.getText()));
        ms.setDiaPagamento(Integer.parseInt(jTDiaPagamento.getText()));
        ms.setDataTermino("-");

        String SQL_INSERCAO = "update Mensalidade set idCliente = ?,"
                + " dataInicio  = ?, valor = ?, ano = ?," + mes.toString() + " = ?,"
                + " valorDebito  = ?,  valorPago = ?, diaPagamento = ?,"
                + " dataTermino = ? where id = ? ";
        PreparedStatement stmt = this.co.getConexao().prepareStatement(SQL_INSERCAO);
        stmt.setInt(1, ms.getIdCliente());
        stmt.setString(2, ms.getDataInicio());
        stmt.setFloat(3, ms.getValor());
        stmt.setString(4, ms.getAno());
        stmt.setString(5, pagamento);
        stmt.setFloat(6, ms.getValorDebito());
        stmt.setFloat(7, ms.getValorPago());
        stmt.setInt(8, ms.getDiaPagamento());
        stmt.setString(9, ms.getDataTermino());
        stmt.setInt(10, ms.getId());

        stmt.execute();
        stmt.close();
        JOptionPane.showMessageDialog(null, "Registrado");
    }

    private void buscarMensalidades() {

        tabela = (DefaultTableModel) jTable1.getModel();
        tabela.setNumRows(0);

        Session sesion = HibernateUtil.getSessionFactory().openSession();
        Transaction tx = null;
        SQLQuery query;
        query = sesion.createSQLQuery("SELECT*FROM mensalidade where idCliente =" + this.cod);
        query.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
        java.util.List results = query.list();
        for (Object object : results) {
            Map row = (Map) object;
            tmResultSet.addRow(new Object[]{row.get("id"), row.get("dataInicio"),
                row.get("valor"), row.get("ano"), row.get("valorDebito"),
                row.get("valorPago"), row.get("diaPagamento")

            });

        }
    }

    private void jTTabelaLinhaSelecionada(JTable tabela) {
        if (jTable1.getSelectedRow() != -1) {
            String cod = (jTable1.getValueAt(jTable1.getSelectedRow(), 0)).toString();
            this.idDescricaoControle = Integer.parseInt(cod);
            PagamentoAtrazado pg = new PagamentoAtrazado(null, true);
            pg.passaId(idDescricaoControle);
            pg.setVisible(true);
            jBAdicionar.setEnabled(false);
        }

    }
}
