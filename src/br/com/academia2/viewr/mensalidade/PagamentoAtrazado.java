/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.academia2.viewr.mensalidade;

import academia2.HibernateUtil;
import academia2.model;
import br.com.academia2.model.Mensalidade;
import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import org.hibernate.Criteria;
import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.hibernate.Transaction;

/**
 *
 * @author anton
 */
public class PagamentoAtrazado extends javax.swing.JDialog {
    private DefaultTableModel tmResultSet = new DefaultTableModel(null, new String[]{"ID","NOME", "ID CLIENTE","VALOR EM ABERTO","PAGO", "DATA INICIO"});
    ;
  java.util.List<br.com.academia2.model.Mensalidade> resultado;
    private ListSelectionModel lsmResult;
    private DefaultTableModel tabela;
    private int idDescricaoControle;
    private float valorPago = 0;
    private float valorDebito = 0;
    Connection conec;
    model co = new model();
    /**
     * Creates new form PagamentoAtrazado
     */
    public PagamentoAtrazado(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jTPesq = new javax.swing.JTextField();
        jBAdicionar = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jCMes = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jTValor = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("DEBITOS");

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));

        jTable2.setModel(tmResultSet);
        jTable2.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);          lsmResult = jTable2.getSelectionModel();          lsmResult.addListSelectionListener(new ListSelectionListener() {               public void valueChanged(ListSelectionEvent e) {                                        if (! e.getValueIsAdjusting()){                           jTTabelaLinhaSelecionada(jTable2);                       }                                    }          });
        jScrollPane2.setViewportView(jTable2);

        jBAdicionar.setBackground(new Color(0,0,0,1));
        jBAdicionar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/academia2/icone/add_icon.png"))); // NOI18N
        jBAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAdicionarActionPerformed(evt);
            }
        });

        jButton4.setBackground(new Color(0,0,0,1));
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/academia2/icone/pesquisa.png"))); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jCMes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione..." }));
        jCMes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCMesActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("MÃŠS:");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("VALOR:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTPesq)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCMes, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTValor, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                        .addComponent(jBAdicionar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTPesq, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jCMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel8)
                        .addComponent(jLabel1)
                        .addComponent(jTValor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jBAdicionar, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(704, 307));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jBAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAdicionarActionPerformed
        try {
            registraValor();
        } catch (SQLException ex) {
            Logger.getLogger(PagamentoAtrazado.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBAdicionarActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        buscaDevedores();
        //    buscar();        // TODO add your handling code here:;
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jCMesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCMesActionPerformed
        pegaMesAberto();
        // TODO add your handling code here:
    }//GEN-LAST:event_jCMesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PagamentoAtrazado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PagamentoAtrazado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PagamentoAtrazado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PagamentoAtrazado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                PagamentoAtrazado dialog = new PagamentoAtrazado(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBAdicionar;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox<String> jCMes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTPesq;
    private javax.swing.JTextField jTValor;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
/*
    
    VOU CRIANDO UMA PESQUISA PARA OS CLIENTES EM DEBITOS
    VAI MOSTRAR O  CLIENTE EM DEBITO, DAI QUE AO CLICAR NO CLIENTE VAI APARECER
    UMA OUTRA TELA COM OS MESES EM DÃ‰BITOS.
    
    
  
*/
    private void buscaDevedores() {
        
        tabela = (DefaultTableModel) jTable2.getModel();
        tabela.setNumRows(0);
        Session sesion = HibernateUtil.getSessionFactory().openSession();
        Transaction tx = null;
        //PESQUISA COM SQLQUERY E JOIN MAIS TRANSFORMACAO EM LISTA DO HIBERNATE.
        SQLQuery query = sesion.createSQLQuery("select mensalidade.id, mensalidade.idCliente, mensalidade.dataInicio, mensalidade.valorDebito,mensalidade.valorPago, "
                + "  cliente.nome  from mensalidade inner join cliente on mensalidade.idCliente = cliente.id where mensalidade.valorDebito > 0");
        query.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
        java.util.List results = query.list();
        for (Object object : results) {
            Map row = (Map) object;
            //float x = (float) row.get("valorDebito");
            jTPesq.setText(String.valueOf(row.get("valorDebito")));

            tmResultSet.addRow(new Object[]{
                row.get("id"),
                row.get("nome"),
                row.get("idCliente"),
                row.get("valorDebito"),
                row.get("valorPago"),
                row.get("dataInicio")
            
            });
        }    }

    private void pegaMesAberto() {
        
      /*  int conta = 0;
                
        System.out.println(conta);
        while(conta<=jCMes.getItemCount()){
        jCMes.removeItemAt(conta);
        conta=conta+1;
    }
        /*for(int i = conta; i>=0; i--){
            jCMes.removeItemAt(i);
        }
        */
        Session sesion = HibernateUtil.getSessionFactory().openSession();
        Transaction tx = null;
        //PESQUISA COM SQLQUERY E JOIN MAIS TRANSFORMACAO EM LISTA DO HIBERNATE.
        SQLQuery query = sesion.createSQLQuery("select * from mensalidade where id="+this.idDescricaoControle+"");
        query.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
        java.util.List results = query.list();
        for (Object object : results) {
            Map row = (Map) object;
            //float x = (float) row.get("valorDebito");
            //jTPesq.setText(String.valueOf(row.get("valorDebito")));
              //  jTextField1.setText(String.valueOf(row.get("janeriro")));
                if(row.get("janeriro") == null){jCMes.addItem("Janeiro");}
             //   jTFevereiro.setText(String.valueOf(row.get("fevereiro")));
                if(row.get("fevereiro") == null){jCMes.addItem("Fevereiro");}
              //  jTMarco.setText(String.valueOf(row.get("marco")));
                if(row.get("marco") == null){jCMes.addItem("Marco");}
                
              //  jTAbril.setText(String.valueOf(row.get("abril")));
                if(row.get("abril") == null){jCMes.addItem("Abril");}
                
              //  jTMaio.setText(String.valueOf(row.get("maio")));
                if(row.get("maio") == null){jCMes.addItem("Maio");}
                
              //  jTJunho.setText(String.valueOf(row.get("junho")));
                if(row.get("junho") == null){jCMes.addItem("Junho");}
                
              //  jTJulho.setText(String.valueOf(row.get("julho")));
                if(row.get("julho") == null){jCMes.addItem("Julho");}
                
             //   jTAgosto.setText(String.valueOf(row.get("agosto")));
                if(row.get("agosto") == null){jCMes.addItem("Agosto");}
                
              //  jTSetembro.setText(String.valueOf(row.get("setembro")));
                if(row.get("setembro") == null){jCMes.addItem("Setembro");}
                
              //  jTOutubro.setText(String.valueOf(row.get("outubro")));
                if(row.get("outubro") == null){jCMes.addItem("Outubro");}
                
             //   jTNovembro.setText(String.valueOf(row.get("novembro")));
                if(row.get("novembro") == null){jCMes.addItem("Novembro");}
                
              //  jTDezembro.setText(String.valueOf(row.get("dezembro")));
                if(row.get("dezembro") == null){jCMes.addItem("Dezembro");}
                
        }    

    }
        private void jTTabelaLinhaSelecionada(JTable tabela) {
            if (jTable2.getSelectedRow() != -1) {
            String cod = (jTable2.getValueAt(jTable2.getSelectedRow(), 0)).toString();
            this.idDescricaoControle = Integer.parseInt(cod);
            String v1 = String.valueOf(jTable2.getValueAt(jTable2.getSelectedRow(), 3));
            valorDebito = Float.parseFloat(v1);
            String v2 = String.valueOf(jTable2.getValueAt(jTable2.getSelectedRow(), 4));
            valorPago = Float.parseFloat(v2);
            pegaMesAberto();
            jTable2.setEnabled(false);
            // jTMarca.setText(nomeMarca);

        }

    }
        public void passaId(int id){
            System.out.println(id);
            //idDescricaoControle = id;
            buscaDevedoresSelecionados(id);
        }
        
          private void buscaDevedoresSelecionados(int id) {
        //tabela = (DefaultTableModel) jTable1.getModel();
//        tabela.setNumRows(0);
        Session sesion = HibernateUtil.getSessionFactory().openSession();
        Transaction tx = null;
        //PESQUISA COM SQLQUERY E JOIN MAIS TRANSFORMACAO EM LISTA DO HIBERNATE.
        SQLQuery query = sesion.createSQLQuery("select mensalidade.id, mensalidade.idCliente, mensalidade.dataInicio, mensalidade.valorDebito,mensalidade.valorPago, "
                + "  cliente.nome  from mensalidade inner join cliente on mensalidade.idCliente = cliente.id where mensalidade.valorDebito > 0 && mensalidade.id=12");
        query.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
        java.util.List results = query.list();
        for (Object object : results) {
            Map row = (Map) object;
         int dever = 0;
         float compara = Float.parseFloat(row.get("valorDebito").toString());
         String janeiro = String.valueOf(row.get("janeriro"));
         String fev = String.valueOf(row.get("fevereiro"));
         String marc = String.valueOf(row.get("marco"));
         String abr = String.valueOf(row.get("abril"));
         String ma = String.valueOf(row.get("maio"));
         String jun = String.valueOf(row.get("junho"));
         String jul = String.valueOf(row.get("julho"));
         String ago = String.valueOf(row.get("agosto"));
         String sete = String.valueOf(row.get("setembro"));
         String out = String.valueOf(row.get("outubro"));
         String nov = String.valueOf(row.get("novembro"));
         String dez = String.valueOf(row.get("dezembro"));
         if(janeiro.equalsIgnoreCase(null)){
             dever = 1;
         }else if(fev.equalsIgnoreCase(null)){
             dever = 1;
         }else if(marc.equalsIgnoreCase(null)){
             dever = 1;
         }else if(abr.equalsIgnoreCase(null)){
             dever = 1;
         }else if(ma.equalsIgnoreCase(null)){
             dever = 1;
         }else if(jun.equalsIgnoreCase(null)){
             dever = 1;
         }else if(jul.equalsIgnoreCase(null)){
             dever = 1;
         }else if(ago.equalsIgnoreCase(null)){
             dever = 1;
         }else if(sete.equalsIgnoreCase(null)){
             dever = 1;
         }else if(out.equalsIgnoreCase(null)){
             dever = 1;
         }else if(nov.equalsIgnoreCase(null)){
             dever = 1;
         }else if(dez.equalsIgnoreCase(null)){
             dever = 1;
         }else if(fev.equalsIgnoreCase(null)){
             dever = 1;
         }else if(fev.equalsIgnoreCase(null)){
             dever = 1;
         }else if(fev.equalsIgnoreCase(null)){
             dever = 1;
         }
          if(compara>0 || dever == 1){
            tmResultSet.addRow(new Object[]{
                row.get("id"),
                row.get("nome"),
                row.get("idCliente"),
                row.get("valorDebito"),
                row.get("valorPago"),
                row.get("dataInicio")
            
            });
          }else{
              JOptionPane.showMessageDialog(null, "Cliente NÃƒO possui DEBITO");
          }
        }    }

    private void registraValor() throws SQLException {
        
        String mes = "";
        if(jCMes.getSelectedItem().equals("Janeiro")){
            mes = "janeriro";
        }else if(jCMes.getSelectedItem().equals("Fevereiro")){
            mes = "fevereiro";
        }else if(jCMes.getSelectedItem().equals("Marco")){
            mes = "marco";
        }else if(jCMes.getSelectedItem().equals("Abril")){
            mes = "abril";
        }else if(jCMes.getSelectedItem().equals("Maio")){
            mes = "maio";
        }else if(jCMes.getSelectedItem().equals("Junho")){
            mes = "junho";
        }else if(jCMes.getSelectedItem().equals("Julho")){
            mes = "julho";
        }else if(jCMes.getSelectedItem().equals("Agosto")){
            mes = "agosto";
        }else if(jCMes.getSelectedItem().equals("Setembro")){
            mes = "setembro";
        }else if(jCMes.getSelectedItem().equals("Outubro")){
            mes = "outubro";
        }else if(jCMes.getSelectedItem().equals("Novembro")){
            mes = "novembro";
        }else if(jCMes.getSelectedItem().equals("Dezembro")){
            mes = "dezembro";
        }else {
            JOptionPane.showMessageDialog(null, "Selecione o MÃªs a ser Quitado");
        }
        
        
      /*  Session sesion = HibernateUtil.getSessionFactory().openSession();
        Transaction tx = null;
        float debitoLocal = valorDebito - (Float.parseFloat(jTValor.getText()));
        float valorLocal = valorPago+(Float.parseFloat(jTValor.getText()));
        SQLQuery query = sesion.createSQLQuery("UPDATE `mensalidade` SET `"+mes+"` = 'pago', valorDebito = "+debitoLocal+", valorPago = "+valorLocal+" WHERE `mensalidade`.`id` = "+idDescricaoControle+"");
        query.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
        query.executeUpdate();
*/
         Mensalidade ms = new Mensalidade();
        float debitoLocal = valorDebito - (Float.parseFloat(jTValor.getText()));
        float valorLocal = valorPago+(Float.parseFloat(jTValor.getText()));
        int i = 10;
         String SQL_INSERCAO = "UPDATE `mensalidade` SET "+mes+"='pago', `valorDebito` = '"+debitoLocal+"', `valorPago` = '"+valorLocal+"' WHERE `mensalidade`.`id` ="+this.idDescricaoControle;
         
      
         
       PreparedStatement stmt = this.co.getConexao().prepareStatement(SQL_INSERCAO);
      
      //  stmt.setFloat(1,valorDebito);
       // stmt.setFloat(2,valorPago);
       // stmt.setInt(3,idDescricaoControle);
       
        stmt.execute();
        stmt.close();
        JOptionPane.showMessageDialog(null, "Pagamento Registrado");
    }
}
