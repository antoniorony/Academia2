/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.academia2.viewr.cliente;

import academia2.HibernateUtil;
import br.com.academia2.model.Modeloficha;
import br.com.academia2.viewr.modelo.ModeloAbdome;
import br.com.academia2.viewr.modelo.ModeloAntebraco;
import br.com.academia2.viewr.modelo.ModeloBiceps;
import br.com.academia2.viewr.modelo.ModeloCoxa;
import br.com.academia2.viewr.modelo.ModeloDeltoides;
import br.com.academia2.viewr.modelo.ModeloDorsais;
import br.com.academia2.viewr.modelo.ModeloGemeos;
import br.com.academia2.viewr.modelo.ModeloGluteo;
import br.com.academia2.viewr.modelo.ModeloPeitorais;
import br.com.academia2.viewr.modelo.ModeloTriceps;
import java.awt.Color;
import java.awt.event.ItemListener;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import org.hibernate.Criteria;
import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.hibernate.Transaction;

/**
 *
 * @author Antonio Rony
 */
public class GerenciaModeloFicha extends javax.swing.JDialog {

    private DefaultTableModel tmResultSet = new DefaultTableModel(null, new String[]{"ID", "ABDOMEN", "ANTEPRACO", "BICEPS", "COXA", "DELTOIDES", "DORSAIS", "GEMEOS", "GLUTEO", "PEITORAIS", "TRICEPS"});
    ;
  java.util.List<br.com.academia2.model.Ficha> resultado;
    private ListSelectionModel lsmResult;
    private DefaultTableModel tabela;

    private int idDescricaoControle;
    private int idAbdomen;
    private int idAntebraco;
    private int idBiceps;
    private int idCoxa;
    private int idDeltoides;
    private int idDorsais;
    private int idGemeos;
    private int idGluteo;
    private int idPeitorais;
    private int idTriceps;

    /**
     * Creates new form GerenciaModeloFicha
     */
    public GerenciaModeloFicha(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        buscaModeloAbdomen();
        buscaModeloAntebraco();
        buscaModeloBiceps();
        buscaModeloCoxa();
        buscaModeloDeltoides();
        buscaModeloDorsais();
        buscaModeloGemeos();
        buscaModeloGluteo();
        buscaModeloPeitorais();
        buscaModeloTriceps();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jCAbdomen = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jButton1.setBackground(new Color(0,0,0,1));
        jButton2 = new javax.swing.JButton();
        jButton2.setBackground(new Color(0,0,0,1));
        jButton3 = new javax.swing.JButton();
        jButton3.setBackground(new Color(0,0,0,1));
        jButton4 = new javax.swing.JButton();
        jButton4.setBackground(new Color(0,0,0,1));
        jButton5 = new javax.swing.JButton();
        jButton5.setBackground(new Color(0,0,0,1));
        jButton6 = new javax.swing.JButton();
        jButton6.setBackground(new Color(0,0,0,1));
        jButton7 = new javax.swing.JButton();
        jButton7.setBackground(new Color(0,0,0,1));
        jButton8 = new javax.swing.JButton();
        jButton8.setBackground(new Color(0,0,0,1));
        jButton9 = new javax.swing.JButton();
        jButton9.setBackground(new Color(0,0,0,1));
        jButton10 = new javax.swing.JButton();
        jButton10.setBackground(new Color(0,0,0,1));
        jBAdicionar = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jBEditar = new javax.swing.JButton();
        jBExcluir = new javax.swing.JButton();
        jComboBox11 = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jComboBox12 = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        jComboBox13 = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        jComboBox14 = new javax.swing.JComboBox<>();
        jLabel15 = new javax.swing.JLabel();
        jComboBox15 = new javax.swing.JComboBox<>();
        jLabel16 = new javax.swing.JLabel();
        jComboBox16 = new javax.swing.JComboBox<>();
        jLabel17 = new javax.swing.JLabel();
        jComboBox17 = new javax.swing.JComboBox<>();
        jLabel18 = new javax.swing.JLabel();
        jComboBox18 = new javax.swing.JComboBox<>();
        jComboBox19 = new javax.swing.JComboBox<>();
        jLabel19 = new javax.swing.JLabel();
        jSeparator19 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTable1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);          lsmResult = jTable1.getSelectionModel();          lsmResult.addListSelectionListener(new ListSelectionListener() {               public void valueChanged(ListSelectionEvent e) {                                        if (! e.getValueIsAdjusting()){                           jTTabelaLinhaSelecionada(jTable1);                       }                                    }          });
        jTPesq = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));

        jLabel1.setForeground(new java.awt.Color(240, 240, 240));
        jLabel1.setText("MODELO ABDOME:");

        jCAbdomen.setAutoscrolls(true);
        jCAbdomen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCAbdomenMouseClicked(evt);
            }
        });
        jCAbdomen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCAbdomenActionPerformed(evt);
            }
        });

        jButton1.setForeground(new java.awt.Color(240, 240, 240));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/academia2/icone/busq.png"))); // NOI18N
        jButton1.setText("VISUALIZAR");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setForeground(new java.awt.Color(240, 240, 240));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/academia2/icone/busq.png"))); // NOI18N
        jButton2.setText("VISUALIZAR");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setForeground(new java.awt.Color(240, 240, 240));
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/academia2/icone/busq.png"))); // NOI18N
        jButton3.setText("VISUALIZAR");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setForeground(new java.awt.Color(240, 240, 240));
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/academia2/icone/busq.png"))); // NOI18N
        jButton4.setText("VISUALIZAR");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setForeground(new java.awt.Color(240, 240, 240));
        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/academia2/icone/busq.png"))); // NOI18N
        jButton5.setText("VISUALIZAR");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setForeground(new java.awt.Color(240, 240, 240));
        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/academia2/icone/busq.png"))); // NOI18N
        jButton6.setText("VISUALIZAR");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setForeground(new java.awt.Color(240, 240, 240));
        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/academia2/icone/busq.png"))); // NOI18N
        jButton7.setText("VISUALIZAR");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setForeground(new java.awt.Color(240, 240, 240));
        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/academia2/icone/busq.png"))); // NOI18N
        jButton8.setText("VISUALIZAR");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setForeground(new java.awt.Color(240, 240, 240));
        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/academia2/icone/busq.png"))); // NOI18N
        jButton9.setText("VISUALIZAR");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setForeground(new java.awt.Color(240, 240, 240));
        jButton10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/academia2/icone/busq.png"))); // NOI18N
        jButton10.setText("VISUALIZAR");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jBAdicionar.setBackground(new Color(0,0,0,1));
        jBAdicionar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/academia2/icone/add_icon.png"))); // NOI18N
        jBAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAdicionarActionPerformed(evt);
            }
        });

        jButton4.setBackground(new Color(0,0,0,1));
        jButton11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/academia2/icone/pesquisa.png"))); // NOI18N
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jBEditar.setBackground(new Color(0,0,0,1));
        jBEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/academia2/icone/EDITAR.png"))); // NOI18N
        jBEditar.setPreferredSize(new java.awt.Dimension(65, 35));
        jBEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBEditarActionPerformed(evt);
            }
        });

        jBExcluir.setBackground(new Color(0,0,0,1));
        jBExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/academia2/icone/remove.png"))); // NOI18N
        jBExcluir.setPreferredSize(new java.awt.Dimension(65, 36));
        jBExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBExcluirActionPerformed(evt);
            }
        });

        jComboBox11.setAutoscrolls(true);
        jComboBox11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox11ActionPerformed(evt);
            }
        });

        jLabel11.setForeground(new java.awt.Color(240, 240, 240));
        jLabel11.setText("ANTEBRAÇO : ");

        jLabel12.setForeground(new java.awt.Color(240, 240, 240));
        jLabel12.setText("BICEPS:");

        jComboBox12.setAutoscrolls(true);
        jComboBox12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox12ActionPerformed(evt);
            }
        });

        jLabel13.setForeground(new java.awt.Color(240, 240, 240));
        jLabel13.setText("COXA: ");

        jComboBox13.setAutoscrolls(true);
        jComboBox13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox13ActionPerformed(evt);
            }
        });

        jLabel14.setForeground(new java.awt.Color(240, 240, 240));
        jLabel14.setText("DELTOIDES:");

        jComboBox14.setAutoscrolls(true);
        jComboBox14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox14ActionPerformed(evt);
            }
        });

        jLabel15.setForeground(new java.awt.Color(240, 240, 240));
        jLabel15.setText("DORSAIS:");

        jComboBox15.setAutoscrolls(true);
        jComboBox15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox15ActionPerformed(evt);
            }
        });

        jLabel16.setForeground(new java.awt.Color(240, 240, 240));
        jLabel16.setText("GLUTEO:");

        jComboBox16.setAutoscrolls(true);
        jComboBox16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox16ActionPerformed(evt);
            }
        });

        jLabel17.setForeground(new java.awt.Color(240, 240, 240));
        jLabel17.setText("GEMEOS:");

        jComboBox17.setAutoscrolls(true);
        jComboBox17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox17ActionPerformed(evt);
            }
        });

        jLabel18.setForeground(new java.awt.Color(240, 240, 240));
        jLabel18.setText("PEITORAIS:");

        jComboBox18.setAutoscrolls(true);
        jComboBox18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox18ActionPerformed(evt);
            }
        });

        jComboBox19.setAutoscrolls(true);
        jComboBox19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox19ActionPerformed(evt);
            }
        });

        jLabel19.setForeground(new java.awt.Color(240, 240, 240));
        jLabel19.setText("TRICEPS: ");

        jSeparator19.setForeground(new java.awt.Color(255, 255, 255));
        jSeparator19.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jTable1.setModel(tmResultSet);
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jBExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jTPesq)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jComboBox14, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton9))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCAbdomen, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton1))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel17)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jComboBox16, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton6))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel18)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jComboBox18, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton3))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jComboBox12, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton4)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jSeparator19, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel15)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jComboBox15, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jButton10))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel11)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jComboBox11, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(10, 10, 10)
                                        .addComponent(jButton2))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel19)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jComboBox19, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jButton8))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel13)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jComboBox13, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jButton5))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel16)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jComboBox17, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jButton7)))
                                .addGap(0, 102, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(330, 330, 330)
                                .addComponent(jBAdicionar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jBAdicionar, jBEditar, jBExcluir, jButton11});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton1, jButton10, jButton2, jButton3, jButton4, jButton5, jButton6, jButton7, jButton8, jButton9});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jCAbdomen, jComboBox11, jComboBox12, jComboBox13, jComboBox14, jComboBox15, jComboBox16, jComboBox17, jComboBox18, jComboBox19});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel1, jLabel11, jLabel12, jLabel13, jLabel14, jLabel15, jLabel16, jLabel17, jLabel18, jLabel19});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator19)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel11)
                                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBox11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(22, 22, 22)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel13)
                                    .addComponent(jComboBox13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(22, 22, 22)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel15)
                                    .addComponent(jComboBox15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jComboBox17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel16)
                                    .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(22, 22, 22)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel19)
                                    .addComponent(jComboBox19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 11, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(jCAbdomen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(16, 16, 16)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(134, 134, 134)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel18)
                                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jComboBox18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 5, Short.MAX_VALUE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel12)
                                            .addComponent(jComboBox12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(22, 22, 22)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel14)
                                            .addComponent(jComboBox14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(22, 22, 22)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel17)
                                            .addComponent(jComboBox16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 0, Short.MAX_VALUE)))))))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTPesq, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBAdicionar, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jBEditar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBExcluir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(21, 21, 21))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jBAdicionar, jBEditar, jBExcluir, jButton11});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButton1, jButton10, jButton2, jButton3, jButton4, jButton5, jButton6, jButton7, jButton8, jButton9});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jCAbdomen, jComboBox11, jComboBox12, jComboBox13, jComboBox14, jComboBox15, jComboBox16, jComboBox17, jComboBox18, jComboBox19});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel1, jLabel11, jLabel12, jLabel13, jLabel14, jLabel15, jLabel16, jLabel17, jLabel18, jLabel19});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(857, 520));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jBAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAdicionarActionPerformed
        salvar();
    }//GEN-LAST:event_jBAdicionarActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        buscar();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jBEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBEditarActionPerformed
        int confirma = JOptionPane.showConfirmDialog(this, "Deseja Alterar?");
        if (confirma == 0) {
            editar();
        }
    }//GEN-LAST:event_jBEditarActionPerformed

    private void jBExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBExcluirActionPerformed
        int confirma = JOptionPane.showConfirmDialog(this, "Deseja EXCLUIR?");
        if (confirma == 0) {
            excluir();
        }
    }//GEN-LAST:event_jBExcluirActionPerformed

    private void jCAbdomenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCAbdomenActionPerformed
        String vlid = jCAbdomen.getSelectedItem().toString();
        int cco = vlid.indexOf("|");
        vlid = vlid.substring(0, cco - 1);
        this.idAbdomen = Integer.parseInt(vlid);
    }//GEN-LAST:event_jCAbdomenActionPerformed

    private void jCAbdomenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCAbdomenMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jCAbdomenMouseClicked

    private void jComboBox12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox12ActionPerformed
        String vlid = jComboBox12.getSelectedItem().toString();
        int cco = vlid.indexOf("|");
        vlid = vlid.substring(0, cco - 1);
        this.idBiceps = Integer.parseInt(vlid);
    }//GEN-LAST:event_jComboBox12ActionPerformed

    private void jComboBox14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox14ActionPerformed
        String vlid = jComboBox14.getSelectedItem().toString();
        int cco = vlid.indexOf("|");
        vlid = vlid.substring(0, cco - 1);
        this.idDeltoides = Integer.parseInt(vlid);
    }//GEN-LAST:event_jComboBox14ActionPerformed

    private void jComboBox16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox16ActionPerformed
        String vlid = jComboBox16.getSelectedItem().toString();
        int cco = vlid.indexOf("|");
        vlid = vlid.substring(0, cco - 1);
        this.idGemeos = Integer.parseInt(vlid);
    }//GEN-LAST:event_jComboBox16ActionPerformed

    private void jComboBox18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox18ActionPerformed
        String vlid = jComboBox18.getSelectedItem().toString();
        int cco = vlid.indexOf("|");
        vlid = vlid.substring(0, cco - 1);
        this.idPeitorais = Integer.parseInt(vlid);
    }//GEN-LAST:event_jComboBox18ActionPerformed

    private void jComboBox11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox11ActionPerformed
        String vlid = jComboBox11.getSelectedItem().toString();
        int cco = vlid.indexOf("|");
        vlid = vlid.substring(0, cco - 1);
        this.idAntebraco = Integer.parseInt(vlid);
    }//GEN-LAST:event_jComboBox11ActionPerformed

    private void jComboBox13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox13ActionPerformed
        String vlid = jComboBox13.getSelectedItem().toString();
        int cco = vlid.indexOf("|");
        vlid = vlid.substring(0, cco - 1);
        this.idCoxa = Integer.parseInt(vlid);
    }//GEN-LAST:event_jComboBox13ActionPerformed

    private void jComboBox15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox15ActionPerformed
        String vlid = jComboBox15.getSelectedItem().toString();
        int cco = vlid.indexOf("|");
        vlid = vlid.substring(0, cco - 1);
        this.idDorsais = Integer.parseInt(vlid);
    }//GEN-LAST:event_jComboBox15ActionPerformed

    private void jComboBox17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox17ActionPerformed
        String vlid = jComboBox17.getSelectedItem().toString();
        int cco = vlid.indexOf("|");
        vlid = vlid.substring(0, cco - 1);
        this.idGluteo = Integer.parseInt(vlid);
    }//GEN-LAST:event_jComboBox17ActionPerformed

    private void jComboBox19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox19ActionPerformed
        String vlid = jComboBox19.getSelectedItem().toString();
        int cco = vlid.indexOf("|");
        vlid = vlid.substring(0, cco - 1);
        this.idTriceps = Integer.parseInt(vlid);
    }//GEN-LAST:event_jComboBox19ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ModeloAbdome m = new ModeloAbdome(null, true);
        m.passaParametro(this.idAbdomen);
        m.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        ModeloAntebraco antebraco = new ModeloAntebraco(null, true);
        antebraco.passaParametro(idAntebraco);
        antebraco.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        ModeloBiceps modelo = new ModeloBiceps(null, true);
        modelo.passaParametro(idBiceps);
        modelo.setVisible(true);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        ModeloCoxa modelo = new ModeloCoxa(null, true);
        modelo.passaParametro(idCoxa);
        modelo.setVisible(true);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        ModeloDeltoides modelo = new ModeloDeltoides(null, true);
        modelo.passaParametro(idDeltoides);
        modelo.setVisible(true);    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        ModeloDorsais modelo = new ModeloDorsais(null, true);
        modelo.passaParametro(idDorsais);
        modelo.setVisible(true);
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        ModeloGemeos modelo = new ModeloGemeos(null, true);
        modelo.passaParametro(idGemeos);
        modelo.setVisible(true);      }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        ModeloGluteo modelo = new ModeloGluteo(null, true);
        modelo.passaParametro(idGluteo);
        modelo.setVisible(true);     }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        ModeloPeitorais modelo = new ModeloPeitorais(null, true);
        modelo.passaParametro(idPeitorais);
        modelo.setVisible(true);       }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        ModeloTriceps modelo = new ModeloTriceps(null, true);
        modelo.passaParametro(idTriceps);
        modelo.setVisible(true);         }//GEN-LAST:event_jButton8ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GerenciaModeloFicha.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GerenciaModeloFicha.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GerenciaModeloFicha.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GerenciaModeloFicha.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                GerenciaModeloFicha dialog = new GerenciaModeloFicha(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBAdicionar;
    private javax.swing.JButton jBEditar;
    private javax.swing.JButton jBExcluir;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox<String> jCAbdomen;
    private javax.swing.JComboBox<String> jComboBox11;
    private javax.swing.JComboBox<String> jComboBox12;
    private javax.swing.JComboBox<String> jComboBox13;
    private javax.swing.JComboBox<String> jComboBox14;
    private javax.swing.JComboBox<String> jComboBox15;
    private javax.swing.JComboBox<String> jComboBox16;
    private javax.swing.JComboBox<String> jComboBox17;
    private javax.swing.JComboBox<String> jComboBox18;
    private javax.swing.JComboBox<String> jComboBox19;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator19;
    private javax.swing.JTextField jTPesq;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    private void buscaModeloAbdomen() {
        Session sesion = HibernateUtil.getSessionFactory().openSession();
        Transaction tx = null;
        //PESQUISA COM SQLQUERY E JOIN MAIS TRANSFORMACAO EM LISTA DO HIBERNATE.
        SQLQuery query = sesion.createSQLQuery("select modeloabdome.id, modeloabdome.idabdome, modeloabdome.divt, modeloabdome.serie, modeloabdome.rept, modeloabdome.carga,"
                + " modeloabdome.intponto, modeloabdome.cadencia,  abdome.descricao  from modeloabdome inner join abdome on modeloabdome.idabdome = abdome.id");
        query.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
        java.util.List results = query.list();
        for (Object object : results) {
            Map row = (Map) object;

            String item = row.get("id").toString() + " | ";
            String item2 = row.get("descricao").toString();
            jCAbdomen.addItem(item + item2);

            /*    
        listaAbdome.addRow(new Object[]{
                row.get("id"),
                row.get("descricao")
            
            });
             */
        }

    }

    private void buscaModeloAntebraco() {
        Session sesion = HibernateUtil.getSessionFactory().openSession();
        Transaction tx = null;
        //PESQUISA COM SQLQUERY E JOIN MAIS TRANSFORMACAO EM LISTA DO HIBERNATE.
        SQLQuery query = sesion.createSQLQuery("select modeloantebraco.id, modeloantebraco.idAntebraco, modeloantebraco.divt, modeloantebraco.serie, modeloantebraco.rept, modeloantebraco.carga,"
                + " modeloantebraco.intponto, modeloantebraco.cadencia,  antebraco.descricao  from modeloantebraco inner join antebraco on modeloantebraco.idAntebraco = antebraco.id");
        query.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
        java.util.List results = query.list();
        for (Object object : results) {
            Map row = (Map) object;

            String item = row.get("id").toString() + " | ";
            String item2 = row.get("descricao").toString();
            jComboBox11.addItem(item + item2);

            /*    
        listaAbdome.addRow(new Object[]{
                row.get("id"),
                row.get("descricao")
            
            });
             */
        }

    }

    private void buscaModeloBiceps() {
        Session sesion = HibernateUtil.getSessionFactory().openSession();
        Transaction tx = null;
        //PESQUISA COM SQLQUERY E JOIN MAIS TRANSFORMACAO EM LISTA DO HIBERNATE.
        SQLQuery query = sesion.createSQLQuery("select modelobiceps.id, modelobiceps.idBiceps, modelobiceps.divt, modelobiceps.serie, modelobiceps.rept, modelobiceps.carga,"
                + " modelobiceps.intponto, modelobiceps.cadencia,  biceps.descricao  from modelobiceps inner join biceps on modelobiceps.idBiceps = biceps.id");
        query.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
        java.util.List results = query.list();
        for (Object object : results) {
            Map row = (Map) object;

            String item = row.get("id").toString() + " | ";
            String item2 = row.get("descricao").toString();
            jComboBox12.addItem(item + item2);

            /*    
        listaAbdome.addRow(new Object[]{
                row.get("id"),
                row.get("descricao")
            
            });
             */
        }
    }

    private void buscaModeloCoxa() {
        Session sesion = HibernateUtil.getSessionFactory().openSession();
        Transaction tx = null;
        //PESQUISA COM SQLQUERY E JOIN MAIS TRANSFORMACAO EM LISTA DO HIBERNATE.
        SQLQuery query = sesion.createSQLQuery("select modelocoxa.id, modelocoxa.idcoxa, modelocoxa.divt, modelocoxa.serie, modelocoxa.rept, modelocoxa.carga,"
                + " modelocoxa.intponto, modelocoxa.cadencia, coxa.descricao from modelocoxa inner join coxa on modelocoxa.idcoxa = coxa.id");
        query.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
        java.util.List results = query.list();
        for (Object object : results) {
            Map row = (Map) object;

            String item = row.get("id").toString() + " | ";
            String item2 = row.get("descricao").toString();
            jComboBox13.addItem(item + item2);

            /*    
        listaAbdome.addRow(new Object[]{
                row.get("id"),
                row.get("descricao")
            
            });
             */
        }
    }

    private void buscaModeloDeltoides() {
        Session sesion = HibernateUtil.getSessionFactory().openSession();
        Transaction tx = null;
        //PESQUISA COM SQLQUERY E JOIN MAIS TRANSFORMACAO EM LISTA DO HIBERNATE.
        SQLQuery query = sesion.createSQLQuery("select modelodeltoides.id, modelodeltoides.iddeltoides, modelodeltoides.divt, modelodeltoides.serie, modelodeltoides.rept, modelodeltoides.carga,"
                + " modelodeltoides.intponto, modelodeltoides.cadencia, deltoides.descricao from modelodeltoides inner join deltoides on modelodeltoides.iddeltoides = deltoides.id");
        query.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
        java.util.List results = query.list();
        for (Object object : results) {
            Map row = (Map) object;

            String item = row.get("id").toString() + " | ";
            String item2 = row.get("descricao").toString();
            jComboBox14.addItem(item + item2);

            /*    
        listaAbdome.addRow(new Object[]{
                row.get("id"),
                row.get("descricao")
            
            });
             */
        }
    }

    private void buscaModeloDorsais() {
        Session sesion = HibernateUtil.getSessionFactory().openSession();
        Transaction tx = null;
        //PESQUISA COM SQLQUERY E JOIN MAIS TRANSFORMACAO EM LISTA DO HIBERNATE.
        SQLQuery query = sesion.createSQLQuery("select modelodorsais.id, modelodorsais.iddorsais, modelodorsais.divt, modelodorsais.serie, modelodorsais.rept, modelodorsais.carga,"
                + " modelodorsais.intponto, modelodorsais.cadencia, dorsais.descricao from modelodorsais inner join dorsais on modelodorsais.iddorsais = dorsais.id");
        query.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
        java.util.List results = query.list();
        for (Object object : results) {
            Map row = (Map) object;

            String item = row.get("id").toString() + " | ";
            String item2 = row.get("descricao").toString();
            jComboBox15.addItem(item + item2);

            /*    
        listaAbdome.addRow(new Object[]{
                row.get("id"),
                row.get("descricao")
            
            });
             */
        }
    }

    private void buscaModeloGemeos() {
        Session sesion = HibernateUtil.getSessionFactory().openSession();
        Transaction tx = null;
        //PESQUISA COM SQLQUERY E JOIN MAIS TRANSFORMACAO EM LISTA DO HIBERNATE.
        SQLQuery query = sesion.createSQLQuery("select modelogemeos.id, modelogemeos.idgemeos, modelogemeos.divt, modelogemeos.serie, modelogemeos.rept, modelogemeos.carga,"
                + " modelogemeos.intponto, modelogemeos.cadencia, gemeos.descricao from modelogemeos inner join gemeos on modelogemeos.idgemeos = gemeos.id");
        query.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
        java.util.List results = query.list();
        for (Object object : results) {
            Map row = (Map) object;

            String item = row.get("id").toString() + " | ";
            String item2 = row.get("descricao").toString();
            jComboBox16.addItem(item + item2);

            /*    
        listaAbdome.addRow(new Object[]{
                row.get("id"),
                row.get("descricao")
            
            });
             */
        }
    }

    private void buscaModeloGluteo() {
        Session sesion = HibernateUtil.getSessionFactory().openSession();
        Transaction tx = null;
        //PESQUISA COM SQLQUERY E JOIN MAIS TRANSFORMACAO EM LISTA DO HIBERNATE.
        SQLQuery query = sesion.createSQLQuery("select modelogluteo.id, modelogluteo.idgluteo, modelogluteo.divt, modelogluteo.serie, modelogluteo.rept, modelogluteo.carga,"
                + " modelogluteo.intponto, modelogluteo.cadencia, gluteo.descricao from modelogluteo inner join gluteo on modelogluteo.idgluteo = gluteo.id");
        query.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
        java.util.List results = query.list();
        for (Object object : results) {
            Map row = (Map) object;

            String item = row.get("id").toString() + " | ";
            String item2 = row.get("descricao").toString();
            jComboBox17.addItem(item + item2);

            /*    
        listaAbdome.addRow(new Object[]{
                row.get("id"),
                row.get("descricao")
            
            });
             */
        }
    }

    private void buscaModeloPeitorais() {
        Session sesion = HibernateUtil.getSessionFactory().openSession();
        Transaction tx = null;
        //PESQUISA COM SQLQUERY E JOIN MAIS TRANSFORMACAO EM LISTA DO HIBERNATE.
        SQLQuery query = sesion.createSQLQuery("select modelopeitorais.id, modelopeitorais.idPeitorais, modelopeitorais.divt, modelopeitorais.serie, modelopeitorais.rept, modelopeitorais.carga,"
                + " modelopeitorais.intponto, modelopeitorais.cadencia, peitorais.descricao from modelopeitorais inner join peitorais on modelopeitorais.idPeitorais = peitorais.id");
        query.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
        java.util.List results = query.list();
        for (Object object : results) {
            Map row = (Map) object;

            String item = row.get("id").toString() + " | ";
            String item2 = row.get("descricao").toString();
            jComboBox18.addItem(item + item2);

            /*    
        listaAbdome.addRow(new Object[]{
                row.get("id"),
                row.get("descricao")
            
            });
             */
        }
    }

    private void buscaModeloTriceps() {
        Session sesion = HibernateUtil.getSessionFactory().openSession();
        Transaction tx = null;
        //PESQUISA COM SQLQUERY E JOIN MAIS TRANSFORMACAO EM LISTA DO HIBERNATE.
        SQLQuery query = sesion.createSQLQuery("select modelotriceps.id, modelotriceps.idtriceps, modelotriceps.divt, modelotriceps.serie, modelotriceps.rept, modelotriceps.carga,"
                + " modelotriceps.intponto, modelotriceps.cadencia, triceps.descricao from modelotriceps inner join triceps on modelotriceps.idtriceps = triceps.id");
        query.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
        java.util.List results = query.list();
        for (Object object : results) {
            Map row = (Map) object;

            String item = row.get("id").toString() + " | ";
            String item2 = row.get("descricao").toString();
            jComboBox19.addItem(item + item2);

            /*    
        listaAbdome.addRow(new Object[]{
                row.get("id"),
                row.get("descricao")
            
            });
             */
        }
    }

    private void salvar() {
        Modeloficha modeloficha = new Modeloficha();
        modeloficha.setIdModeloAbdome(idAbdomen);
        modeloficha.setIdModeloAntebraco(idAntebraco);
        modeloficha.setIdModeloBiceps(idBiceps);
        modeloficha.setIdModeloCoxa(idCoxa);
        modeloficha.setIdModeloDeltoides(idDeltoides);
        modeloficha.setIdModeloDorsais(idDorsais);
        modeloficha.setIdModeloGemeos(idGemeos);
        modeloficha.setIdModeloGruteo(idGluteo);
        modeloficha.setIdModeloTriceps(idDeltoides);
        modeloficha.setIdMoeloPeitorais(idPeitorais);
        modeloficha.setIdPerimetria(1);
        modeloficha.setIdRotinaTreino(1);

        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();
        session.save(modeloficha);
        session.getTransaction().commit();
        JOptionPane.showMessageDialog(this, "Salvo com Sucesso.");
    }
    
        public void buscarId(int id) {
        tabela = (DefaultTableModel) jTable1.getModel();
        tabela.setNumRows(0);
        Session sesion = HibernateUtil.getSessionFactory().openSession();
        Transaction tx = null;
        //PESQUISA COM SQLQUERY E JOIN MAIS TRANSFORMACAO EM LISTA DO HIBERNATE.
        SQLQuery query;
       
            String nome = jTPesq.getText();
            query = sesion.createSQLQuery("SELECT*FROM modeloficha where id = '" + id + "' ");
            query.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
       

        java.util.List results = query.list();
        for (Object object : results) {
            Map row = (Map) object;
            tmResultSet.addRow(new Object[]{
                row.get("id"),
                row.get("idModeloAbdome"),
                row.get("idModeloAntebraco"),
                row.get("idModeloBiceps"),
                row.get("idModeloCoxa"),
                row.get("idModeloDeltoides"),
                row.get("idModeloDorsais"),
                row.get("idModeloGemeos"),
                row.get("idModeloGruteo"),
                row.get("idMoeloPeitorais"),
                row.get("idModeloTriceps"),
                row.get("idPerimetria")
            //row.get("carga")
            });
        }
        jBAdicionar.setEnabled(true);

    }

    private void buscar() {
        tabela = (DefaultTableModel) jTable1.getModel();
        tabela.setNumRows(0);
        Session sesion = HibernateUtil.getSessionFactory().openSession();
        Transaction tx = null;
        //PESQUISA COM SQLQUERY E JOIN MAIS TRANSFORMACAO EM LISTA DO HIBERNATE.
        SQLQuery query;
        if (jTPesq.getText().equals("") || jTPesq.getText().equals(" ")) {
            query = sesion.createSQLQuery("SELECT*FROM modeloficha");
            query.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
        } else {
            String nome = jTPesq.getText();
            query = sesion.createSQLQuery("SELECT*FROM modeloficha where id = '" + nome + "' ");
            query.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
        }

        java.util.List results = query.list();
        for (Object object : results) {
            Map row = (Map) object;
            tmResultSet.addRow(new Object[]{
                row.get("id"),
                row.get("idModeloAbdome"),
                row.get("idModeloAntebraco"),
                row.get("idModeloBiceps"),
                row.get("idModeloCoxa"),
                row.get("idModeloDeltoides"),
                row.get("idModeloDorsais"),
                row.get("idModeloGemeos"),
                row.get("idModeloGruteo"),
                row.get("idMoeloPeitorais"),
                row.get("idModeloTriceps"),
                row.get("idPerimetria")
            //row.get("carga")
            });
        }
        jBAdicionar.setEnabled(true);

    }

    private void jTTabelaLinhaSelecionada(JTable tabela) {
        if (jTable1.getSelectedRow() != -1) {

            String cod = (jTable1.getValueAt(jTable1.getSelectedRow(), 0)).toString();
            this.idDescricaoControle = Integer.parseInt(cod);
            this.idAbdomen = Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(), 1).toString());
            this.idAntebraco = Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(), 2).toString());
            this.idBiceps = Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(), 3).toString());
            this.idCoxa = Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(), 4).toString());
            this.idDeltoides = Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(), 5).toString());
            this.idDorsais = Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(), 6).toString());
            this.idGemeos = Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(), 7).toString());
            this.idGluteo = Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(), 8).toString());
            this.idPeitorais = Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(), 9).toString());
            this.idTriceps = Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(), 10).toString());

            pegaEJoga();
            // jTMarca.setText(nomeMarca);
            jBAdicionar.setEnabled(false);
            //System.out.println(this.idDescricaoControle);

        }

    }

    private void pegaEJoga() {
        Session sesion = HibernateUtil.getSessionFactory().openSession();
        Transaction tx = null;
        //PESQUISA COM SQLQUERY E JOIN MAIS TRANSFORMACAO EM LISTA DO HIBERNATE.
        SQLQuery query = sesion.createSQLQuery("select modeloabdome.id, modeloabdome.idabdome, abdome.descricao from modeloabdome inner join abdome on modeloabdome.idabdome = '" + this.idAbdomen + "'");
        query.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
        java.util.List results = query.list();
        for (Object object : results) {
            Map row = (Map) object;
            if (this.idAbdomen == Integer.parseInt(row.get("id").toString())) {
                String item = row.get("id").toString() + " | ";
                String item2 = row.get("descricao").toString();
                jCAbdomen.setSelectedItem(item + item2);
            }

        }
        sesion.close();
        Session sesion2 = HibernateUtil.getSessionFactory().openSession();
        Transaction tx2 = null;
        SQLQuery query2 = sesion2.createSQLQuery("select modeloantebraco.id, antebraco.descricao from modeloantebraco inner join antebraco on modeloantebraco.idAntebraco = '" + this.idAbdomen + "'");
        query2.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
        java.util.List results2 = query2.list();
        for (Object object3 : results2) {
            Map row3 = (Map) object3;
            if (this.idAbdomen == Integer.parseInt(row3.get("id").toString())) {
                String item = row3.get("id").toString() + " | ";
                String item2 = row3.get("descricao").toString();
                jComboBox11.setSelectedItem(item + item2);
            }

        }
        Session sesion3 = HibernateUtil.getSessionFactory().openSession();
        Transaction tx3 = null;

        SQLQuery query3 = sesion3.createSQLQuery("select modelobiceps.id, modelobiceps.idBiceps, biceps.descricao from modelobiceps inner join biceps on modelobiceps.idBiceps = '" + this.idAbdomen + "'");
        query3.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
        java.util.List results3 = query3.list();
        for (Object object : results3) {
            Map row = (Map) object;
            if (this.idAbdomen == Integer.parseInt(row.get("id").toString())) {
                String item = row.get("id").toString() + " | ";
                String item2 = row.get("descricao").toString();
                jComboBox11.setSelectedItem(item + item2);
            }

        }
        Session sesion4 = HibernateUtil.getSessionFactory().openSession();
        Transaction tx4 = null;
        SQLQuery query4 = sesion4.createSQLQuery("select modelocoxa.id, modelocoxa.idcoxa, coxa.descricao from modelocoxa inner join coxa on modelocoxa.idcoxa = '" + this.idAbdomen + "'");
        query4.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
        java.util.List results4 = query4.list();
        for (Object object : results4) {
            Map row = (Map) object;
            if (this.idAbdomen == Integer.parseInt(row.get("id").toString())) {
                String item = row.get("id").toString() + " | ";
                String item2 = row.get("descricao").toString();
                jComboBox11.setSelectedItem(item + item2);
            }

        }
      Session sesion5 = HibernateUtil.getSessionFactory().openSession();
        //deltoides
        SQLQuery query5 = sesion5.createSQLQuery("select modelodeltoides.id, modelodeltoides.iddeltoides, deltoides.descricao from modelodeltoides inner join deltoides on modelodeltoides.iddeltoides = '" + this.idAbdomen + "'");
        query5.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
        java.util.List results5 = query5.list();
        for (Object object : results5) {
            Map row = (Map) object;
            if (this.idAbdomen == Integer.parseInt(row.get("id").toString())) {
                String item = row.get("id").toString() + " | ";
                String item2 = row.get("descricao").toString();
                jComboBox11.setSelectedItem(item + item2);
            }

        }
      Session sesion6 = HibernateUtil.getSessionFactory().openSession();

        SQLQuery query6 = sesion6.createSQLQuery("select modelodorsais.id, modelodorsais.iddorsais, dorsais.descricao from modelodorsais inner join dorsais on modelodorsais.iddorsais = '" + this.idAbdomen + "'");
        query6.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
        java.util.List results6 = query6.list();
        for (Object object : results6) {
            Map row = (Map) object;
            if (this.idAbdomen == Integer.parseInt(row.get("id").toString())) {
                String item = row.get("id").toString() + " | ";
                String item2 = row.get("descricao").toString();
                jComboBox11.setSelectedItem(item + item2);
            }

        }
      Session sesion7 = HibernateUtil.getSessionFactory().openSession();

        SQLQuery query7 = sesion7.createSQLQuery("select modelogemeos.id, modelogemeos.idgemeos, gemeos.descricao from modelogemeos inner join gemeos on modelogemeos.idgemeos = '" + this.idAbdomen + "'");
        query7.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
        java.util.List results7 = query7.list();
        for (Object object : results7) {
            Map row = (Map) object;
            if (this.idAbdomen == Integer.parseInt(row.get("id").toString())) {
                String item = row.get("id").toString() + " | ";
                String item2 = row.get("descricao").toString();
                jComboBox11.setSelectedItem(item + item2);
            }

        }
      Session sesion8 = HibernateUtil.getSessionFactory().openSession();

        SQLQuery query8 = sesion8.createSQLQuery("select modelogluteo.id, modelogluteo.idgluteo, antebraco.descricao from modelogluteo inner join antebraco on modelogluteo.idgluteo = '" + this.idAbdomen + "'");
        query8.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
        java.util.List results8 = query8.list();
        for (Object object : results8) {
            Map row = (Map) object;
            if (this.idAbdomen == Integer.parseInt(row.get("id").toString())) {
                String item = row.get("id").toString() + " | ";
                String item2 = row.get("descricao").toString();
                jComboBox11.setSelectedItem(item + item2);
            }

        }
      Session sesion9 = HibernateUtil.getSessionFactory().openSession();

        SQLQuery query9 = sesion9.createSQLQuery("select modelopeitorais.id, modelopeitorais.idPeitorais, peitorais.descricao from modelopeitorais inner join peitorais on modelopeitorais.idPeitorais = '" + this.idAbdomen + "'");
        query9.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
        java.util.List results9 = query9.list();
        for (Object object : results9) {
            Map row = (Map) object;
            if (this.idAbdomen == Integer.parseInt(row.get("id").toString())) {
                String item = row.get("id").toString() + " | ";
                String item2 = row.get("descricao").toString();
                jComboBox11.setSelectedItem(item + item2);
            }

        }
      Session sesion10 = HibernateUtil.getSessionFactory().openSession();

        SQLQuery query10 = sesion10.createSQLQuery("select modelotriceps.id, modelotriceps.idtriceps, triceps.descricao from modelotriceps inner join triceps on modelotriceps.idtriceps = '" + this.idAbdomen + "'");
        query10.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
        java.util.List results10 = query10.list();
        for (Object object : results10) {
            Map row = (Map) object;
            if (this.idAbdomen == Integer.parseInt(row.get("id").toString())) {
                String item = row.get("id").toString() + " | ";
                String item2 = row.get("descricao").toString();
                jComboBox11.setSelectedItem(item + item2);
            }

        }
    }

    private void editar() {
        Modeloficha modeloficha = new Modeloficha();
        modeloficha.setId(this.idDescricaoControle);
        modeloficha.setIdModeloAbdome(idAbdomen);
        modeloficha.setIdModeloAntebraco(idAntebraco);
        modeloficha.setIdModeloBiceps(idBiceps);
        modeloficha.setIdModeloCoxa(idCoxa);
        modeloficha.setIdModeloDeltoides(idDeltoides);
        modeloficha.setIdModeloDorsais(idDorsais);
        modeloficha.setIdModeloGemeos(idGemeos);
        modeloficha.setIdModeloGruteo(idGluteo);
        modeloficha.setIdModeloTriceps(idDeltoides);
        modeloficha.setIdMoeloPeitorais(idPeitorais);
        modeloficha.setIdPerimetria(1);
        modeloficha.setIdRotinaTreino(1);

        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();
        session.update(modeloficha);
        session.getTransaction().commit();
        JOptionPane.showMessageDialog(this, "Editado com Sucesso.");
    }

    private void excluir() {
        Modeloficha modeloficha = new Modeloficha();
        modeloficha.setId(this.idDescricaoControle);
        modeloficha.setIdModeloAbdome(idAbdomen);
        modeloficha.setIdModeloAntebraco(idAntebraco);
        modeloficha.setIdModeloBiceps(idBiceps);
        modeloficha.setIdModeloCoxa(idCoxa);
        modeloficha.setIdModeloDeltoides(idDeltoides);
        modeloficha.setIdModeloDorsais(idDorsais);
        modeloficha.setIdModeloGemeos(idGemeos);
        modeloficha.setIdModeloGruteo(idGluteo);
        modeloficha.setIdModeloTriceps(idDeltoides);
        modeloficha.setIdMoeloPeitorais(idPeitorais);
        modeloficha.setIdPerimetria(1);
        modeloficha.setIdRotinaTreino(1);

        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();
        session.delete(modeloficha);
        session.getTransaction().commit();
        JOptionPane.showMessageDialog(this, "Excluido com Sucesso.");
    }
}
